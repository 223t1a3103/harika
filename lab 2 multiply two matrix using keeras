{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPZbfWgY3yQ55f2QWT+NQQy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/223t1a3103/harika/blob/main/lab%202%20multiply%20two%20matrix%20using%20keeras\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense, Flatten\n",
        "from tensorflow.keras.optimizers import Adam\n",
        "def generate_data(num_samples=1000):\n",
        "    A = np.random.randint(1, 10, size=(num_samples, 2, 2))\n",
        "    B = np.random.randint(1, 10, size=(num_samples, 2, 2))\n",
        "    C = np.array([np.dot(a, b) for a, b in zip(A, B)])\n",
        "    return (A, B), C\n",
        "\n",
        "# Generate training data\n",
        "(A_train, B_train), C_train = generate_data()\n",
        "# Define the model\n",
        "model = Sequential([\n",
        "    Flatten(input_shape=(2, 2 * 2)),  # Flatten A and B into a single 4-element vector\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(64, activation='relu'),\n",
        "    Dense(4)  # Output layer with 4 units to predict a flattened 2x2 matrix\n",
        "])\n",
        "\n",
        "# Compile the model\n",
        "model.compile(optimizer=Adam(), loss='mean_squared_error')\n",
        "# Flatten matrices for training\n",
        "X_train = np.concatenate([A_train, B_train], axis=-1)  # Combine A and B into a single input vector\n",
        "y_train = C_train.reshape(-1, 4)  # Flatten the output matrices\n",
        "\n",
        "# Train the model\n",
        "model.fit(X_train, y_train, epochs=10, batch_size=32, validation_split=0.1)\n",
        "# Generate test data\n",
        "(A_test, B_test), C_test = generate_data(num_samples=100)\n",
        "X_test = np.concatenate([A_test, B_test], axis=-1)\n",
        "y_test = C_test.reshape(-1, 4)\n",
        "\n",
        "# Evaluate the model\n",
        "loss = model.evaluate(X_test, y_test)\n",
        "print(f\"Test loss: {loss}\")\n",
        "\n",
        "# Make predictions\n",
        "y_pred = model.predict(X_test)\n",
        "y_pred = y_pred.reshape(-1, 2, 2)  # Reshape back to (2x2) matrices\n",
        "\n",
        "# Report results\n",
        "for i in range(5):  # Print a few examples\n",
        "    print(f\"Input A:\\n{A_test[i]}\")\n",
        "    print(f\"Input B:\\n{B_test[i]}\")\n",
        "    print(f\"Predicted C:\\n{y_pred[i]}\")\n",
        "    print(f\"Actual C:\\n{C_test[i]}\\n\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kzcOX8gJRfUc",
        "outputId": "f2b4b2bf-b72a-466a-b638-01ab8514022c"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/layers/reshaping/flatten.py:37: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "  super().__init__(**kwargs)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 8ms/step - loss: 3166.3560 - val_loss: 2455.7703\n",
            "Epoch 2/10\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 2271.8853 - val_loss: 820.4114\n",
            "Epoch 3/10\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 707.8660 - val_loss: 494.2654\n",
            "Epoch 4/10\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 4ms/step - loss: 478.2851 - val_loss: 455.2027\n",
            "Epoch 5/10\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 437.6947 - val_loss: 417.2903\n",
            "Epoch 6/10\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 387.5197 - val_loss: 376.7618\n",
            "Epoch 7/10\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 352.0272 - val_loss: 330.6306\n",
            "Epoch 8/10\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 315.4534 - val_loss: 287.6012\n",
            "Epoch 9/10\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 270.4049 - val_loss: 252.3895\n",
            "Epoch 10/10\n",
            "\u001b[1m29/29\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 2ms/step - loss: 261.2552 - val_loss: 215.9272\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 3ms/step - loss: 214.2233 \n",
            "Test loss: 220.47125244140625\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step\n",
            "Input A:\n",
            "[[1 3]\n",
            " [7 7]]\n",
            "Input B:\n",
            "[[1 6]\n",
            " [6 6]]\n",
            "Predicted C:\n",
            "[[16.74356  32.77975 ]\n",
            " [57.793278 79.03829 ]]\n",
            "Actual C:\n",
            "[[19 24]\n",
            " [49 84]]\n",
            "\n",
            "Input A:\n",
            "[[3 1]\n",
            " [1 8]]\n",
            "Input B:\n",
            "[[5 6]\n",
            " [1 7]]\n",
            "Predicted C:\n",
            "[[16.4086   33.8767  ]\n",
            " [42.341278 64.07396 ]]\n",
            "Actual C:\n",
            "[[16 25]\n",
            " [13 62]]\n",
            "\n",
            "Input A:\n",
            "[[4 5]\n",
            " [4 7]]\n",
            "Input B:\n",
            "[[3 4]\n",
            " [2 8]]\n",
            "Predicted C:\n",
            "[[30.573387 49.858055]\n",
            " [42.836903 63.101425]]\n",
            "Actual C:\n",
            "[[22 56]\n",
            " [26 72]]\n",
            "\n",
            "Input A:\n",
            "[[8 8]\n",
            " [6 7]]\n",
            "Input B:\n",
            "[[2 6]\n",
            " [2 4]]\n",
            "Predicted C:\n",
            "[[50.599323 64.68188 ]\n",
            " [43.69923  54.025078]]\n",
            "Actual C:\n",
            "[[32 80]\n",
            " [26 64]]\n",
            "\n",
            "Input A:\n",
            "[[9 2]\n",
            " [4 6]]\n",
            "Input B:\n",
            "[[7 2]\n",
            " [8 2]]\n",
            "Predicted C:\n",
            "[[67.62062  43.308525]\n",
            " [59.592823 32.20812 ]]\n",
            "Actual C:\n",
            "[[79 22]\n",
            " [76 20]]\n",
            "\n"
          ]
        }
      ]
    }
  ]
}